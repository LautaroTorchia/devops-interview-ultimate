name: CI/CD Pipeline Nginx

on:
  push:
    paths:
      - "ejercicio3/index.html"
      - "ejercicio3/Dockerfile"
      - "ejercicio3/docker-compose.yml"
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          cd ejercicio3/
          docker build -t ejercicio3-nginx:latest .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to DockerHub
        run: |
          docker tag ejercicio3-nginx:latest ${{ secrets.DOCKER_USERNAME }}/ejercicio3-nginx:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/ejercicio3-nginx:${{ github.sha }}
          docker tag ejercicio3-nginx:latest ${{ secrets.DOCKER_USERNAME }}/ejercicio3-nginx:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ejercicio3-nginx:latest

  security:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Scan Docker Image with Trivy
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/ejercicio3-nginx:latest
          docker run --rm aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/ejercicio3-nginx:latest || true

      - name: Test Dockerfile security with Conftest
        run: |
          docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-docker-security.rego ejercicio3/Dockerfile

  prepare-deploy:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Setup GCP CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Start GCP VM for deployment
        run: |
          gcloud compute instances start ${{ secrets.GCP_INSTANCE_NAME }} --zone=us-central1-c

      - name: Schedule VM shutdown after 30 minutes
        run: |
          gcloud compute instances add-metadata ${{ secrets.GCP_INSTANCE_NAME }} \
            --zone=us-central1-c \
            --metadata shutdown-at=$(date -u -d "+30 minutes" +"%Y-%m-%dT%H:%M:%SZ")
            
      - name: Wait for instance to be ready
        run: |
          echo "Waiting for Instance to be ready"
          sleep 30

  deploy:
    runs-on: [self-hosted]
    needs: prepare-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy with Docker Compose
        run: |
          cd ejercicio3
          docker compose up -d --remove-orphans

      - name: Get Public IP Address
        id: public-ip
        run: |
          INSTANCE_IP=$(gcloud compute instances describe ${{ secrets.GCP_INSTANCE_NAME }} --zone=us-central1-c --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Verify Deployment
        run: |
          curl -s http://$INSTANCE_IP:80 | grep "Bienvenidos a Nginx"

      - name: Log Public URL
        run: |
          echo "Application deployed and accessible at: http://$INSTANCE_IP"

      - name: Post Public IP to GitHub UI
        uses: actions/github-script@v6
        with:
          script: |
            const instanceIP = process.env.INSTANCE_IP;
            core.summary.addHeading('Deployment Successful');
            core.summary.addLink(`Access your deployment at: http://${instanceIP}`, `http://${instanceIP}`);
            await core.summary.write();