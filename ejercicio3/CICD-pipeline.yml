name: CI/CD Nginx Deployment Pipeline

on:
  push:
    paths:
      - "ejercicio3/index.html"
      - "ejercicio3/Dockerfile"
      - "ejercicio3/docker-compose.yml"
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ejercicio3-nginx
  GCP_ZONE: us-central1-c

jobs:
  lint-and-test:
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Code Quality Tests
        run: echo "Placeholder for Code Tests"

  container-security-scan:
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Trivy Security Scan
        run: |
          docker run --rm -v $(pwd):/project aquasec/trivy:latest fs /project --exit-code 1 --severity HIGH,CRITICAL || true

  build-and-push-container:
    runs-on: ubuntu-22.04
    needs: [lint-and-test, container-security-scan]
    steps:

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          cd ejercicio3/
          docker build -t $DOCKER_IMAGE_NAME:${{ github.sha }} .

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
          # Pushing TAG image
          docker tag $DOCKER_IMAGE_NAME:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:${{ github.sha }}

          # Pushing Latest image
          docker tag $DOCKER_IMAGE_NAME:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:latest

      - name: Start GCP VM
        run: |
          gcloud compute instances start ${{ secrets.GCP_INSTANCE_NAME }} --zone=$GCP_ZONE

          until gcloud compute instances describe ${{ secrets.GCP_INSTANCE_NAME }} \
                --zone=$GCP_ZONE --format='get(status)' | grep -q RUNNING; do
              echo "Waiting for VM..."
              sleep 5
          done

  deploy-container:
    runs-on: [self-hosted]
    needs: build-and-push-container
    steps:

      - name: Deploy to Docker Compose
        run: |
          cd ejercicio3
          docker compose pull
          docker compose up -d --remove-orphans

      - name: Verify Deployment
        run: |
          PUBLIC_IP=$(gcloud compute instances describe ${{ secrets.GCP_INSTANCE_NAME }} \
                      --zone=$GCP_ZONE --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "Deployed at http://$PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Add Deployment Link to GitHub UI
        run: |
          echo "::notice title=Deployment Successful::The application is live at: http://${{ env.PUBLIC_IP }}"